/** Declaration file generated by dts-gen */

export class Chrono {
    constructor(option: any);

    parse(text: any, refDate: any, opt: any): any;

    parseDate(text: any, refDate: any, opt: any): any;

}

export class ParsedComponents {
    constructor(components: any, ref: any);

    assign(component: any, value: any): void;

    clone(): any;

    date(): any;

    dayjs(): any;

    get(component: any, value: any): any;

    imply(component: any, value: any): void;

    isCertain(component: any): any;

    isOnlyDayMonthComponent(): any;

    isOnlyWeekdayComponent(): any;

    isPossibleDate(): any;

    moment(): any;

}

export class ParsedResult {
    constructor(result: any);

    clone(): any;

    date(): any;

    hasPossibleDates(): any;

    isOnlyDayMonth(): any;

    isOnlyWeekday(): any;

}

export function Filter(): any;

export function Parser(config: any): any;

export function Refiner(): any;

export function parse(...args: any[]): any;

export function parseDate(...args: any[]): any;

export namespace casual {
    const parsers: {
        execute: any;
        extract: any;
        isStrictMode: any;
        pattern: any;
    }[];

    const refiners: {
        refine: any;
    }[];

    function parse(text: any, refDate: any, opt: any): any;

    function parseDate(text: any, refDate: any, opt: any): any;

}

export namespace de {
    const parsers: {
        execute: any;
        extract: any;
        isStrictMode: any;
        pattern: any;
    }[];

    const refiners: {
        refine: any;
    }[];

    function parse(text: any, refDate: any, opt: any): any;

    function parseDate(text: any, refDate: any, opt: any): any;

}

export namespace en {
    const parsers: {
        execute: any;
        extract: any;
        isStrictMode: any;
        pattern: any;
    }[];

    const refiners: {
        refine: any;
    }[];

    function parse(text: any, refDate: any, opt: any): any;

    function parseDate(text: any, refDate: any, opt: any): any;

}

export namespace en_GB {
    const parsers: {
        execute: any;
        extract: any;
        isStrictMode: any;
        pattern: any;
    }[];

    const refiners: {
        refine: any;
    }[];

    function parse(text: any, refDate: any, opt: any): any;

    function parseDate(text: any, refDate: any, opt: any): any;

}

export namespace es {
    const parsers: {
        execute: any;
        extract: any;
        isStrictMode: any;
        pattern: any;
    }[];

    const refiners: {
        refine: any;
    }[];

    function parse(text: any, refDate: any, opt: any): any;

    function parseDate(text: any, refDate: any, opt: any): any;

}

export namespace fr {
    const parsers: {
        execute: any;
        extract: any;
        isStrictMode: any;
        pattern: any;
    }[];

    const refiners: {
        refine: any;
    }[];

    function parse(text: any, refDate: any, opt: any): any;

    function parseDate(text: any, refDate: any, opt: any): any;

}

export namespace ja {
    const parsers: {
        execute: any;
        extract: any;
        isStrictMode: any;
        pattern: any;
    }[];

    const refiners: {
        refine: any;
    }[];

    function parse(text: any, refDate: any, opt: any): any;

    function parseDate(text: any, refDate: any, opt: any): any;

}

export namespace options {
    function casualOption(): any;

    function commonPostProcessing(): any;

    function de(config: any): any;

    function en(config: any): any;

    function en_GB(config: any): any;

    function es(config: any): any;

    function fr(config: any): any;

    function ja(): any;

    function mergeOptions(options: any): any;

    function pt(config: any): any;

    function strictOption(): any;

    function zh(): any;

    namespace de {
        function casual(): any;

    }

    namespace en {
        function casual(config: any): any;

    }

    namespace en_GB {
        function casual(config: any): any;

    }

    namespace es {
        function casual(): any;

    }

    namespace fr {
        function casual(): any;

    }

    namespace ja {
        function casual(): any;

    }

    namespace pt {
        function casual(): any;

    }

}

export namespace parser {
    function DECasualDateParser(...args: any[]): any;

    function DEDeadlineFormatParser(...args: any[]): any;

    function DEMonthNameLittleEndianParser(...args: any[]): any;

    function DEMonthNameParser(...args: any[]): any;

    function DESlashDateFormatParser(argument: any, ...args: any[]): any;

    function DETimeAgoFormatParser(...args: any[]): any;

    function DETimeExpressionParser(...args: any[]): any;

    function DEWeekdayParser(...args: any[]): any;

    function ENCasualDateParser(...args: any[]): any;

    function ENCasualTimeParser(...args: any[]): any;

    function ENDeadlineFormatParser(...args: any[]): any;

    function ENISOFormatParser(...args: any[]): any;

    function ENMonthNameLittleEndianParser(...args: any[]): any;

    function ENMonthNameMiddleEndianParser(...args: any[]): any;

    function ENMonthNameParser(...args: any[]): any;

    function ENRelativeDateFormatParser(...args: any[]): any;

    function ENSlashDateFormatParser(config: any, ...args: any[]): any;

    function ENSlashDateFormatStartWithYearParser(...args: any[]): any;

    function ENSlashMonthFormatParser(argument: any, ...args: any[]): any;

    function ENTimeAgoFormatParser(...args: any[]): any;

    function ENTimeExpressionParser(...args: any[]): any;

    function ENTimeLaterFormatParser(...args: any[]): any;

    function ENWeekdayParser(...args: any[]): any;

    function ESCasualDateParser(...args: any[]): any;

    function ESDeadlineFormatParser(...args: any[]): any;

    function ESMonthNameLittleEndianParser(...args: any[]): any;

    function ESSlashDateFormatParser(argument: any, ...args: any[]): any;

    function ESTimeAgoFormatParser(...args: any[]): any;

    function ESTimeExpressionParser(...args: any[]): any;

    function ESWeekdayParser(...args: any[]): any;

    function FRCasualDateParser(...args: any[]): any;

    function FRDeadlineFormatParser(...args: any[]): any;

    function FRMonthNameLittleEndianParser(...args: any[]): any;

    function FRRelativeDateFormatParser(...args: any[]): any;

    function FRSlashDateFormatParser(argument: any, ...args: any[]): any;

    function FRTimeAgoFormatParser(...args: any[]): any;

    function FRTimeExpressionParser(...args: any[]): any;

    function FRWeekdayParser(...args: any[]): any;

    function JPCasualDateParser(...args: any[]): any;

    function JPStandardParser(...args: any[]): any;

    function PTCasualDateParser(...args: any[]): any;

    function PTDeadlineFormatParser(...args: any[]): any;

    function PTMonthNameLittleEndianParser(...args: any[]): any;

    function PTSlashDateFormatParser(argument: any, ...args: any[]): any;

    function PTTimeAgoFormatParser(...args: any[]): any;

    function PTTimeExpressionParser(...args: any[]): any;

    function PTWeekdayParser(...args: any[]): any;

    function Parser(config: any): any;

    function ZHHantCasualDateParser(...args: any[]): any;

    function ZHHantDateParser(...args: any[]): any;

    function ZHHantDeadlineFormatParser(...args: any[]): any;

    function ZHHantTimeExpressionParser(...args: any[]): any;

    function ZHHantWeekdayParser(...args: any[]): any;

    function findYearClosestToRef(ref: any, day: any, month: any): any;

}

export namespace pt {
    const parsers: {
        execute: any;
        extract: any;
        isStrictMode: any;
        pattern: any;
    }[];

    const refiners: {
        refine: any;
    }[];

    function parse(text: any, refDate: any, opt: any): any;

    function parseDate(text: any, refDate: any, opt: any): any;

}

export namespace refiner {
    function DEMergeDateRangeRefiner(): any;

    function DEMergeDateTimeRefiner(): any;

    function ENMergeDateRangeRefiner(): any;

    function ENMergeDateTimeRefiner(): any;

    function ENPrioritizeSpecificDateRefiner(): any;

    function ExtractTimezoneAbbrRefiner(config: any, ...args: any[]): any;

    function ExtractTimezoneOffsetRefiner(): any;

    function FRMergeDateRangeRefiner(): any;

    function FRMergeDateTimeRefiner(): any;

    function Filter(): any;

    function ForwardDateRefiner(): any;

    function JPMergeDateRangeRefiner(): any;

    function OverlapRemovalRefiner(): any;

    function Refiner(): any;

    function UnlikelyFormatFilter(): any;

}

export namespace strict {
    const parsers: {
        execute: any;
        extract: any;
        isStrictMode: any;
        pattern: any;
    }[];

    const refiners: {
        refine: any;
    }[];

    function parse(text: any, refDate: any, opt: any): any;

    function parseDate(text: any, refDate: any, opt: any): any;

}

