/** Declaration file generated by dts-gen */
/*
export = twilio;

declare function twilio(accountSid: any, authToken: any, opts: any): any;

declare namespace twilio {
    class Twilio {
        constructor(username: any, password: any, opts: any);

        request(opts: any): any;

        validateSslCert(): any;

    }

    function IpMessagingClient(sid: any, tkn: any, options: any): void;

    function LookupsClient(sid: any, tkn: any, options: any): void;

    function MonitorClient(sid: any, tkn: any, options: any): void;

    function PricingClient(sid: any, tkn: any, options: any): void;

    function RestClient(sid: any, tkn: any, options: any): void;

    function TaskRouterClient(sid: any, tkn: any, options: any): void;

    function TrunkingClient(sid: any, tkn: any, options: any): void;

    function validateExpressRequest(request: any, authToken: any, opts: any): any;

    function validateRequest(authToken: any, twilioHeader: any, url: any, params: any): any;

    function validateRequestWithBody(authToken: any, twilioHeader: any, url: any, body: any): any;

    function webhook(...args: any[]): any;

    namespace jwt {
        class AccessToken {
            constructor(accountSid: any, keySid: any, secret: any, options: any);

            addGrant(grant: any): void;

            toJwt(algorithm: any): any;

            static ALGORITHMS: string[];

            static DEFAULT_ALGORITHM: string;

        }

        class ClientCapability {
            constructor(options: any);

            addScope(scope: any): void;

            toJwt(): any;

        }

        namespace AccessToken {
            class ChatGrant {
                constructor(options: any);

                toPayload(): any;

            }

            class ConversationsGrant {
                constructor(args: any);

                toPayload(): any;

            }

            class IpMessagingGrant {
                constructor(args: any);

            }

            class SyncGrant {
                constructor(options: any);

                toPayload(): any;

            }

            class TaskRouterGrant {
                constructor(options: any);

                toPayload(): any;

            }

            class VideoGrant {
                constructor(options: any);

                toPayload(): any;

            }

            class VoiceGrant {
                constructor(options: any);

                toPayload(): any;

            }

        }

        namespace ClientCapability {
            class EventStreamScope {
                constructor(filters: any);

                payload(): any;

            }

            class IncomingClientScope {
                constructor(clientName: any);

                payload(): any;

            }

            class OutgoingClientScope {
                constructor(options: any);

                payload(): any;

            }

        }

        namespace taskrouter {
            class TaskRouterCapability {
                constructor(options: any);

                addPolicy(policy: any): void;

                toJwt(): any;

            }

            namespace TaskRouterCapability {
                class Policy {
                    constructor(options: any);

                    payload(): any;

                }

            }

            namespace util {
                function activitiesUrl(workspaceSid: any, activitySid: any): any;

                function defaultEventBridgePolicies(accountSid: any, channelId: any): any;

                function defaultWorkerPolicies(version: any, workspaceSid: any, workerSid: any): any;

                function reservationsUrl(workspaceSid: any, workerSid: any, reservationSid: any): any;

                function taskQueuesUrl(workspaceSid: any, taskQueueSid: any): any;

                function tasksUrl(workspaceSid: any, taskSid: any): any;

                function workersUrl(workspaceSid: any, workerSid: any): any;

                function workspacesUrl(workspaceSid: any): any;

            }

        }

    }

    namespace twiml {
        class FaxResponse {
            constructor();

            receive(attributes: any): any;

        }

        class MessagingResponse {
            constructor();

            message(attributes: any, body: any): any;

            redirect(attributes: any, url: any): any;

        }

        class VoiceResponse {
            constructor();

            connect(attributes: any): any;

            dial(attributes: any, number: any): any;

            echo(attributes: any): any;

            enqueue(attributes: any, name: any): any;

            gather(attributes: any): any;

            hangup(attributes: any): any;

            leave(attributes: any): any;

            pause(attributes: any): any;

            pay(attributes: any): any;

            play(attributes: any, url: any): any;

            prompt(attributes: any): any;

            queue(attributes: any, name: any): any;

            record(attributes: any): any;

            redirect(attributes: any, url: any): any;

            refer(attributes: any): any;

            reject(attributes: any): any;

            say(attributes: any, message: any): any;

            sms(attributes: any, message: any): any;

            start(attributes: any): any;

            stop(attributes: any): any;

        }

    }

}
*/